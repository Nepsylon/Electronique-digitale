C L "MAIN" 0 12 1 "FUNCTION"
D G "__PCH__" 0 82 ""5.015""
D G "__DEVICE__" 0 82 "458"
D G "__DATE__" 0 82 ""21-mai-21""
D G "__TIME__" 0 82 ""11:35:35"" "Standard Header file for the PIC18F458 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 40 "int8" `54 
f B "set_tris_a" 2 40 "void(int8 value)" `53 
v L "value" 2 41 "int8" `56 
f B "set_tris_b" 2 41 "void(int8 value)" `55 
v L "value" 2 42 "int8" `58 
f B "set_tris_c" 2 42 "void(int8 value)" `57 
v L "value" 2 43 "int8" `60 
f B "set_tris_d" 2 43 "void(int8 value)" `59 
v L "value" 2 44 "int8" `62 
f B "set_tris_e" 2 44 "void(int8 value)" `61 
f B "get_tris_a" 2 45 "int8()" `63 
f B "get_tris_b" 2 46 "int8()" `64 
f B "get_tris_c" 2 47 "int8()" `65 
f B "get_tris_d" 2 48 "int8()" `66 
f B "get_tris_e" 2 49 "int8()" `67 
v L "value" 2 50 "int8" `69 
f B "output_a" 2 50 "void(int8 value)" `68 
v L "value" 2 51 "int8" `71 
f B "output_b" 2 51 "void(int8 value)" `70 
v L "value" 2 52 "int8" `73 
f B "output_c" 2 52 "void(int8 value)" `72 
v L "value" 2 53 "int8" `75 
f B "output_d" 2 53 "void(int8 value)" `74 
v L "value" 2 54 "int8" `77 
f B "output_e" 2 54 "void(int8 value)" `76 
f B "input_a" 2 55 "int8()" `78 
f B "input_b" 2 56 "int8()" `79 
f B "input_c" 2 57 "int8()" `80 
f B "input_d" 2 58 "int8()" `81 
f B "input_e" 2 59 "int8()" `82 
f B "input_change_a" 2 60 "int8()" `83 
f B "input_change_b" 2 61 "int8()" `84 
f B "input_change_c" 2 62 "int8()" `85 
f B "input_change_d" 2 63 "int8()" `86 
f B "input_change_e" 2 64 "int8()" `87 
v L "pin" 2 65 "int16" `89 
f B "input" 2 65 "int8(int16 pin)" `88 
v L "pin" 2 66 "int16" `91 
f B "input_state" 2 66 "int8(int16 pin)" `90 
v L "pin" 2 67 "int16" `93 
f B "output_low" 2 67 "void(int16 pin)" `92 
v L "pin" 2 68 "int16" `95 
f B "output_high" 2 68 "void(int16 pin)" `94 
v L "pin" 2 69 "int16" `97 
f B "output_toggle" 2 69 "void(int16 pin)" `96 
v L "pin" 2 70 "int16" `99 
v L "level" 2 70 "int8" `100 
f B "output_bit" 2 70 "void(int16 pin,int8 level)" `98 
v L "pin" 2 71 "int16" `102 
f B "output_float" 2 71 "void(int16 pin)" `101 
v L "pin" 2 72 "int16" `104 
f B "output_drive" 2 72 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 76 "31744"
d G "PIN_A1" 2 77 "31745"
d G "PIN_A2" 2 78 "31746"
d G "PIN_A3" 2 79 "31747"
d G "PIN_A4" 2 80 "31748"
d G "PIN_A5" 2 81 "31749"
d G "PIN_A6" 2 82 "31750"
d G "PIN_B0" 2 84 "31752"
d G "PIN_B1" 2 85 "31753"
d G "PIN_B2" 2 86 "31754"
d G "PIN_B3" 2 87 "31755"
d G "PIN_B4" 2 88 "31756"
d G "PIN_B5" 2 89 "31757"
d G "PIN_B6" 2 90 "31758"
d G "PIN_B7" 2 91 "31759"
d G "PIN_C0" 2 93 "31760"
d G "PIN_C1" 2 94 "31761"
d G "PIN_C2" 2 95 "31762"
d G "PIN_C3" 2 96 "31763"
d G "PIN_C4" 2 97 "31764"
d G "PIN_C5" 2 98 "31765"
d G "PIN_C6" 2 99 "31766"
d G "PIN_C7" 2 100 "31767"
d G "PIN_D0" 2 102 "31768"
d G "PIN_D1" 2 103 "31769"
d G "PIN_D2" 2 104 "31770"
d G "PIN_D3" 2 105 "31771"
d G "PIN_D4" 2 106 "31772"
d G "PIN_D5" 2 107 "31773"
d G "PIN_D6" 2 108 "31774"
d G "PIN_D7" 2 109 "31775"
d G "PIN_E0" 2 111 "31776"
d G "PIN_E1" 2 112 "31777"
d G "PIN_E2" 2 113 "31778"
d G "FALSE" 2 116 "0"
d G "TRUE" 2 117 "1"
d G "BYTE" 2 119 "int8"
d G "BOOLEAN" 2 120 "int1"
d G "getc" 2 122 "getch"
d G "fgetc" 2 123 "getch"
d G "getchar" 2 124 "getch"
d G "putc" 2 125 "putchar"
d G "fputc" 2 126 "putchar"
d G "fgets" 2 127 "gets"
d G "fputs" 2 128 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 133 "int8()" `105 
f B "reset_cpu" 2 134 "void()" `106 
f B "sleep" 2 135 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 137 "7"
d G "MCLR_FROM_SLEEP" 2 138 "11"
d G "MCLR_FROM_RUN" 2 139 "15"
d G "NORMAL_POWER_UP" 2 140 "12"
d G "BROWNOUT_RESTART" 2 141 "14"
d G "WDT_FROM_SLEEP" 2 142 "3"
d G "RESET_INSTRUCTION" 2 143 "0"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 150 "int8" `109 
f B "setup_timer_0" 2 150 "void(int8 mode)" `108 
v L "value" 2 151 "int16" `111 
f B "set_timer0" 2 151 "void(int16 value)" `110 
f B "get_timer0" 2 152 "int16()" `112 
v L "mode" 2 153 "int8" `114 
v L "prescaler" 2 153 "int8" `115 
f B "setup_counters" 2 153 "void(int8 mode,int8 prescaler)" `113 
v L "value" 2 154 "int16" `117 
f B "set_rtcc" 2 154 "void(int16 value)" `116 
f B "get_rtcc" 2 155 "int16()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 157 "0"
d G "T0_EXT_L_TO_H" 2 158 "32"
d G "T0_EXT_H_TO_L" 2 159 "48"
d G "T0_DIV_1" 2 161 "8"
d G "T0_DIV_2" 2 162 "0"
d G "T0_DIV_4" 2 163 "1"
d G "T0_DIV_8" 2 164 "2"
d G "T0_DIV_16" 2 165 "3"
d G "T0_DIV_32" 2 166 "4"
d G "T0_DIV_64" 2 167 "5"
d G "T0_DIV_128" 2 168 "6"
d G "T0_DIV_256" 2 169 "7"
d G "T0_OFF" 2 171 "0x80"
d G "T0_8_BIT" 2 173 "0x40"
d G "RTCC_INTERNAL" 2 175 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 176 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 177 "48"
d G "RTCC_DIV_1" 2 178 "8"
d G "RTCC_DIV_2" 2 179 "0"
d G "RTCC_DIV_4" 2 180 "1"
d G "RTCC_DIV_8" 2 181 "2"
d G "RTCC_DIV_16" 2 182 "3"
d G "RTCC_DIV_32" 2 183 "4"
d G "RTCC_DIV_64" 2 184 "5"
d G "RTCC_DIV_128" 2 185 "6"
d G "RTCC_DIV_256" 2 186 "7"
d G "RTCC_OFF" 2 187 "0x80"
d G "RTCC_8_BIT" 2 188 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 199 "int16" `120 
f B "setup_wdt" 2 199 "void(int16 mode)" `119 
f B "restart_wdt" 2 200 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 202 "0x100"
d G "WDT_OFF" 2 203 "0"
d G "WDT_18MS" 2 205 "0x300"
d G "WDT_36MS" 2 206 "0x500"
d G "WDT_72MS" 2 207 "0x700"
d G "WDT_144MS" 2 208 "0x900"
d G "WDT_288MS" 2 209 "0xB00"
d G "WDT_576MS" 2 210 "0xD00"
d G "WDT_1152MS" 2 211 "0xF00"
d G "WDT_2304MS" 2 212 "0x1108"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 218 "int16" `123 
f B "setup_timer_1" 2 218 "void(int16 mode)" `122 
f B "get_timer1" 2 219 "int16()" `124 
v L "value" 2 220 "int16" `126 
f B "set_timer1" 2 220 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 223 "0"
d G "T1_INTERNAL" 2 224 "0x85"
d G "T1_EXTERNAL" 2 225 "0x87"
d G "T1_EXTERNAL_SYNC" 2 226 "0x83"
d G "T1_CLK_OUT" 2 228 "8"
d G "T1_DIV_BY_1" 2 230 "0"
d G "T1_DIV_BY_2" 2 231 "0x10"
d G "T1_DIV_BY_4" 2 232 "0x20"
d G "T1_DIV_BY_8" 2 233 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 238 "int8" `128 
v L "period" 2 238 "int8" `129 
v L "postscale" 2 238 "int8" `130 
f B "setup_timer_2" 2 238 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 2 239 "int8()" `131 
v L "value" 2 240 "int8" `133 
f B "set_timer2" 2 240 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 242 "0"
d G "T2_DIV_BY_1" 2 243 "4"
d G "T2_DIV_BY_4" 2 244 "5"
d G "T2_DIV_BY_16" 2 245 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
v L "mode" 2 250 "int16" `135 
f B "setup_timer_3" 2 250 "void(int16 mode)" `134 
f B "get_timer3" 2 251 "int16()" `136 
v L "value" 2 252 "int16" `138 
f B "set_timer3" 2 252 "void(int16 value)" `137  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 255 "0"
d G "T3_INTERNAL" 2 256 "0x85"
d G "T3_EXTERNAL" 2 257 "0x87"
d G "T3_EXTERNAL_SYNC" 2 258 "0x83"
d G "T3_DIV_BY_1" 2 260 "0"
d G "T3_DIV_BY_2" 2 261 "0x10"
d G "T3_DIV_BY_4" 2 262 "0x20"
d G "T3_DIV_BY_8" 2 263 "0x30"
c L "set_timer3" 2 3 4 "FUNCTION"
v L "mode" 2 269 "int32" `140 
f B "setup_ccp1" 2 269 "void(int32 mode)" `139 
v L "mode" 2 270 "int32" `142 
v L "pwm" 2 270 "int8" `143 
f G "setup_ccp1" 2 270 "void(int32 mode,int8 pwm)" `141 
v L "value" 2 271 "int16" `145 
f B "set_pwm1_duty" 2 271 "void(int16 value)" `144  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 273 "0"
d G "CCP_CAPTURE_FE" 2 274 "4"
d G "CCP_CAPTURE_RE" 2 275 "5"
d G "CCP_CAPTURE_DIV_4" 2 276 "6"
d G "CCP_CAPTURE_DIV_16" 2 277 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 278 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 279 "9"
d G "CCP_COMPARE_INT" 2 280 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 281 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 2 282 "0xB"
d G "CCP_PWM" 2 283 "0xC"
d G "CCP_PWM_PLUS_1" 2 284 "0x1c"
d G "CCP_PWM_PLUS_2" 2 285 "0x2c"
d G "CCP_PWM_PLUS_3" 2 286 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
d G "T3_CCP1_TO_2" 2 292 "0x48"
d G "T3_CCP2" 2 293 "0x8"
d G "CCP_PWM_H_H" 2 296 "0x0c"
d G "CCP_PWM_H_L" 2 297 "0x0d"
d G "CCP_PWM_L_H" 2 298 "0x0e"
d G "CCP_PWM_L_L" 2 299 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 301 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 302 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 303 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 305 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 306 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 307 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 308 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 309 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 310 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 311 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 313 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 314 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 315 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 317 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 318 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 319 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 321 "0x80000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 325 "int32" `150 
f B "setup_ccp2" 2 325 "void(int32 mode)" `149 
v L "mode" 2 326 "int32" `152 
v L "pwm" 2 326 "int8" `153 
f G "setup_ccp2" 2 326 "void(int32 mode,int8 pwm)" `151 
v L "value" 2 327 "int16" `155 
f B "set_pwm2_duty" 2 327 "void(int16 value)" `154 
c L "set_pwm2_duty" 2 3 5 "FUNCTION"
v L "mode" 2 336 "int8" `160 
f B "setup_psp" 2 336 "void(int8 mode)" `159 
f B "psp_output_full" 2 337 "int8()" `161 
f B "psp_input_full" 2 338 "int8()" `162 
f B "psp_overflow" 2 339 "int8()" `163  "Constants used in SETUP_PSP() are:"
d G "PSP_ENABLED" 2 341 "0x10"
d G "PSP_DISABLED" 2 342 "0"
c L "psp_overflow" 2 3 3 "FUNCTION"
v L "mode" 2 349 "int32" `166 
f B "setup_spi" 2 349 "void(int32 mode)" `165 
v L "value" 2 350 "int8" `168 
f B "spi_write" 2 350 "void(int8 value)" `167 
f B "spi_read" 2 351 "int8()" `169 
v L "value" 2 352 "int8" `171 
f G "spi_read" 2 352 "int8(int8 value)" `170 
f B "spi_data_in" 2 353 "int8()" `172 
v L "mode" 2 354 "int32" `174 
f B "setup_spi2" 2 354 "void(int32 mode)" `173 
v L "value" 2 355 "int8" `176 
f B "spi_write2" 2 355 "void(int8 value)" `175 
f B "spi_read2" 2 356 "int8()" `177 
v L "value" 2 357 "int8" `179 
f G "spi_read2" 2 357 "int8(int8 value)" `178 
f B "spi_data_in2" 2 358 "int8()" `180  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 360 "0x00"
d G "SPI_MASTER" 2 361 "0x20"
d G "SPI_SLAVE" 2 362 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 363 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 364 "0x00"
d G "SPI_CLK_DIV_4" 2 365 "0x00"
d G "SPI_CLK_DIV_16" 2 366 "0x01"
d G "SPI_CLK_DIV_64" 2 367 "0x02"
d G "SPI_CLK_T2" 2 368 "0x03"
d G "SPI_SS_DISABLED" 2 369 "0x01"
d G "SPI_XMIT_L_TO_H" 2 371 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 372 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 374 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 375 "0x8000"
d G "SPI_L_TO_H" 2 378 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 379 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 3 2 "FUNCTION"
v L "baud" 2 383 "int32" `182 
f B "setup_uart" 2 383 "void(int32 baud)" `181 
v L "baud" 2 384 "int32" `184 
v L "stream" 2 384 "int8" `185 
f G "setup_uart" 2 384 "void(int32 baud,int8 stream)" `183 
v L "baud" 2 385 "int32" `187 
v L "stream" 2 385 "int8" `188 
v L "clock" 2 385 "int32" `189 
f G "setup_uart" 2 385 "void(int32 baud,int8 stream,int32 clock)" `186 
v L "baud" 2 386 "int32" `191 
f B "set_uart_speed" 2 386 "void(int32 baud)" `190 
v L "baud" 2 387 "int32" `193 
v L "stream" 2 387 "int8" `194 
f G "set_uart_speed" 2 387 "void(int32 baud,int8 stream)" `192 
v L "baud" 2 388 "int32" `196 
v L "stream" 2 388 "int8" `197 
v L "clock" 2 388 "int32" `198 
f G "set_uart_speed" 2 388 "void(int32 baud,int8 stream,int32 clock)" `195  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 392 "2"
d G "UART_DATA" 2 393 "4"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 397 "int32" `200 
f B "setup_comparator" 2 397 "void(int32 mode)" `199  "Constants used in setup_comparator() are:"
d G "D1_D0_D3_D0" 2 399 "0x0Bff04"
d G "D1_D0_D3_D2_OUT_ON_E1_E2" 2 400 "0x0FF903"
d G "D1_D0_D3_D0_OUT_ON_E1_E2" 2 401 "0x0BF905"
d G "NC_NC_NC_NC" 2 402 "0x00ff07"
d G "D1_D0_D3_D2" 2 403 "0x0Fff02"
d G "D1_D0_NC_NC_OUT_ON_E1" 2 404 "0x03FD01"
d G "D1_VR_D3_VR" 2 405 "0x0Aff06"
d G "D0_VR_D2_VR" 2 406 "0x05ff0e"
d G "CP1_INVERT" 2 407 "0x0000010"
d G "CP2_INVERT" 2 408 "0x0000020"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 415 "int8" `204 
f B "setup_vref" 2 415 "void(int8 mode)" `203  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 417 "0xa0"
d G "VREF_HIGH" 2 418 "0x80"
d G "VREF_F5" 2 420 "0x40"
d G "VREF_COMP" 2 421 "0x10"
c L "setup_vref" 2 3 2 "FUNCTION"
v L "mode" 2 425 "int8" `206 
f B "setup_low_volt_detect" 2 425 "void(int8 mode)" `205  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 427 "0x1F"
d G "LVD_45" 2 428 "0x1E"
d G "LVD_42" 2 429 "0x1D"
d G "LVD_40" 2 430 "0x1C"
d G "LVD_38" 2 431 "0x1B"
d G "LVD_36" 2 432 "0x1A"
d G "LVD_35" 2 433 "0x19"
d G "LVD_33" 2 434 "0x18"
d G "LVD_30" 2 435 "0x17"
d G "LVD_28" 2 436 "0x16"
d G "LVD_27" 2 437 "0x15"
d G "LVD_25" 2 438 "0x14"
d G "LVD_23" 2 439 "0x13"
d G "LVD_21" 2 440 "0x12"
d G "LVD_19" 2 441 "0x11"
c L "setup_low_volt_detect" 2 3 2 "FUNCTION"
v L "mode" 2 446 "int8" `208 
f B "setup_oscillator" 2 446 "void(int8 mode)" `207  "Constants used in setup_oscillator() are:"
d G "OSC_TIMER1" 2 448 "1"
d G "OSC_NORMAL" 2 449 "0"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 456 "int32" `210 
f B "setup_adc" 2 456 "void(int32 mode)" `209 
f B "read_adc" 2 457 "int8()" `211 
v L "mode" 2 458 "int8" `213 
f G "read_adc" 2 458 "int8(int8 mode)" `212 
f G "read_adc" 2 459 "int16()" `214 
v L "mode" 2 460 "int8" `216 
f G "read_adc" 2 460 "int16(int8 mode)" `215 
f B "adc_done" 2 461 "int8()" `217  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 463 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 464 "0x10000"
d G "ADC_CLOCK_DIV_4" 2 465 "0x4000"
d G "ADC_CLOCK_DIV_8" 2 466 "0x0040"
d G "ADC_CLOCK_DIV_16" 2 467 "0x4040"
d G "ADC_CLOCK_DIV_32" 2 468 "0x0080"
d G "ADC_CLOCK_DIV_64" 2 469 "0x4080"
d G "ADC_CLOCK_INTERNAL" 2 470 "0x00c0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "setting" 2 473 "int8" `219 
f B "setup_adc_ports" 2 473 "void(int8 setting)" `218 
v L "channel" 2 474 "int8" `221 
f B "set_adc_channel" 2 474 "void(int8 channel)" `220  "Constants used in SETUP_ADC_PORTS() are:"
d G "NO_ANALOGS" 2 476 "7" "None"
d G "ALL_ANALOG" 2 477 "0" "A0 A1 A2 A3 A5 E0 E1 E2"
d G "AN0_AN1_AN2_AN4_AN5_AN6_AN7_VSS_VREF" 2 478 "1" "A0 A1 A2 A5 E0 E1 E2 VRefh=A3"
d G "AN0_AN1_AN2_AN3_AN4" 2 479 "2" "A0 A1 A2 A3 A5"
d G "AN0_AN1_AN2_AN4_VSS_VREF" 2 480 "3" "A0 A1 A2 A4 VRefh=A3"
d G "AN0_AN1_AN3" 2 481 "4" "A0 A1 A3"
d G "AN0_AN1_VSS_VREF" 2 482 "5" "A0 A1 VRefh=A3"
d G "AN0_AN1_AN4_AN5_AN6_AN7_VREF_VREF" 2 483 "0x08" "A0 A1 A5 E0 E1 E2 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN2_AN3_AN4_AN5" 2 484 "0x09" "A0 A1 A2 A3 A5 E0"
d G "AN0_AN1_AN2_AN4_AN5_VSS_VREF" 2 485 "0x0A" "A0 A1 A2 A5 E0 VRefh=A3"
d G "AN0_AN1_AN4_AN5_VREF_VREF" 2 486 "0x0B" "A0 A1 A5 E0 VRefh=A3 VRefl=A2"
d G "AN0_AN1_AN4_VREF_VREF" 2 487 "0x0C" "A0 A1 A4 VRefh=A3 VRefl=A2"
d G "AN0_AN1_VREF_VREF" 2 488 "0x0D" "A0 A1 VRefh=A3 VRefl=A2"
d G "AN0" 2 489 "0x0E" "A0"
d G "AN0_VREF_VREF" 2 490 "0x0F" "A0 VRefh=A3 VRefl=A2"
d G "ANALOG_RA3_REF" 2 491 "0x1" "!old only provided for compatibility"
d G "A_ANALOG" 2 492 "0x2" "!old only provided for compatibility"
d G "A_ANALOG_RA3_REF" 2 493 "0x3" "!old only provided for compatibility"
d G "RA0_RA1_RA3_ANALOG" 2 494 "0x4" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_REF" 2 495 "0x5" "!old only provided for compatibility"
d G "ANALOG_RA3_RA2_REF" 2 496 "0x8" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2" 2 497 "0x9" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3" 2 498 "0xA" "!old only provided for compatibility"
d G "ANALOG_NOT_RE1_RE2_REF_RA3_RA2" 2 499 "0xB" "!old only provided for compatibility"
d G "A_ANALOG_RA3_RA2_REF" 2 500 "0xC" "!old only provided for compatibility"
d G "RA0_RA1_ANALOG_RA3_RA2_REF" 2 501 "0xD" "!old only provided for compatibility"
d G "RA0_ANALOG" 2 502 "0xE" "!old only provided for compatibility"
d G "RA0_ANALOG_RA3_RA2_REF" 2 503 "0xF" "!old only provided for compatibility"
d G "ADC_START_AND_READ" 2 506 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 507 "1"
d G "ADC_READ_ONLY" 2 508 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 514 "sint8" `223 
f B "abs" 2 514 "sint8(sint8 x)" `222 
v L "x" 2 515 "sint16" `225 
f G "abs" 2 515 "sint16(sint16 x)" `224 
v L "x" 2 516 "sint32" `227 
f G "abs" 2 516 "sint32(sint32 x)" `226 
v L "x" 2 517 "float" `229 
f G "abs" 2 517 "float(float x)" `228 
v L "??65535" 2 518 "int8" `231 
v L "??65535" 2 518 "int8" `232 
f B "_mul" 2 518 "int16(int8 ,int8 )" `230 
v L "??65535" 2 519 "sint8" `231 
v L "??65535" 2 519 "sint8" `235 
f G "_mul" 2 519 "sint16(sint8 ,sint8 )" `233 
v L "??65535" 2 520 "int16" `231 
v L "??65535" 2 520 "int16" `238 
f G "_mul" 2 520 "int32(int16 ,int16 )" `236 
v L "??65535" 2 521 "sint16" `231 
v L "??65535" 2 521 "sint16" `241 
f G "_mul" 2 521 "sint32(sint16 ,sint16 )" `239  "Memory Manipulation Prototypes:"
v L "bank" 2 524 "int8" `243 
v L "offset" 2 524 "int8" `244 
f B "read_bank" 2 524 "int8(int8 bank,int8 offset)" `242 
v L "bank" 2 525 "int8" `246 
v L "offset" 2 525 "int8" `247 
v L "value" 2 525 "int8" `248 
f B "write_bank" 2 525 "void(int8 bank,int8 offset,int8 value)" `245 
v L "dest" 2 526 "*int8" `250 
v L "src" 2 526 "*int8" `251 
f B "strcpy" 2 526 "void(*int8 dest,*int8 src)" `249 
v L "dest" 2 527 "*int8" `253 
v L "src" 2 527 "*int8" `254 
f B "strcopy" 2 527 "void(*int8 dest,*int8 src)" `252 
v L "destination" 2 528 "*int8" `256 
v L "value" 2 528 "int8" `257 
v L "num" 2 528 "int16" `258 
f B "memset" 2 528 "void(*int8 destination,int8 value,int16 num)" `255 
v L "destination" 2 529 "*int8" `260 
v L "source" 2 529 "*int8" `261 
v L "num" 2 529 "int16" `262 
f B "memcpy" 2 529 "void(*int8 destination,*int8 source,int16 num)" `259  "String Prototypes:"
v L "cvalue" 2 532 "int8" `264 
f B "toupper" 2 532 "int8(int8 cvalue)" `263 
v L "cvalue" 2 533 "int8" `266 
f B "tolower" 2 533 "int8(int8 cvalue)" `265 
v L "string" 2 534 "*int8" `268 
v L "cstring" 2 534 "*int8" `269 
f B "sprintf" 2 534 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `267  "Data Manipulators Prototypes:"
v L "address" 2 537 "*int8" `272 
v L "bytes" 2 537 "int8" `273 
v L "value" 2 537 "int8" `274 
f B "shift_left" 2 537 "int8(*int8 address,int8 bytes,int8 value)" `271 
v L "address" 2 538 "*int8" `276 
v L "bytes" 2 538 "int8" `277 
v L "value" 2 538 "int8" `278 
f B "shift_right" 2 538 "int8(*int8 address,int8 bytes,int8 value)" `275 
v L "address" 2 539 "*int8" `280 
v L "bytes" 2 539 "int8" `281 
f B "rotate_left" 2 539 "void(*int8 address,int8 bytes)" `279 
v L "address" 2 540 "*int8" `283 
v L "bytes" 2 540 "int8" `284 
f B "rotate_right" 2 540 "void(*int8 address,int8 bytes)" `282 
v L "value" 2 541 "int8" `286 
f B "swap" 2 541 "void(int8 value)" `285 
v L "var" 2 542 "int16" `288 
v L "offset" 2 542 "int8" `289 
f B "make8" 2 542 "int8(int16 var,int8 offset)" `287 
v L "var" 2 543 "int32" `288 
v L "offset" 2 543 "int8" `292 
f G "make8" 2 543 "int8(int32 var,int8 offset)" `290 
v L "varhigh" 2 544 "int8" `294 
v L "varlow" 2 544 "int8" `295 
f B "make16" 2 544 "int16(int8 varhigh,int8 varlow)" `293 
v L "var1" 2 545 "int16" `297 
f B "make32" 2 545 "int32(int16 var1)" `296 
v L "var1" 2 546 "int16" `299 
v L "var2" 2 546 "int16" `300 
f G "make32" 2 546 "int32(int16 var1,int16 var2)" `298 
v L "var1" 2 547 "int16" `299 
v L "var2" 2 547 "int8" `303 
f G "make32" 2 547 "int32(int16 var1,int8 var2)" `301 
v L "var1" 2 548 "int16" `305 
v L "var2" 2 548 "int8" `306 
v L "var3" 2 548 "int8" `307 
f G "make32" 2 548 "int32(int16 var1,int8 var2,int8 var3)" `304 
v L "var1" 2 549 "int8" `309 
f G "make32" 2 549 "int32(int8 var1)" `308 
v L "var1" 2 550 "int8" `299 
v L "var2" 2 550 "int8" `312 
f G "make32" 2 550 "int32(int8 var1,int8 var2)" `310 
v L "var1" 2 551 "int8" `305 
v L "var2" 2 551 "int8" `306 
v L "var3" 2 551 "int8" `316 
f G "make32" 2 551 "int32(int8 var1,int8 var2,int8 var3)" `313 
v L "var1" 2 552 "int8" `318 
v L "var2" 2 552 "int8" `319 
v L "var3" 2 552 "int8" `320 
v L "var4" 2 552 "int8" `321 
f G "make32" 2 552 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `317 
v L "var1" 2 553 "int8" `299 
v L "var2" 2 553 "int16" `324 
f G "make32" 2 553 "int32(int8 var1,int16 var2)" `322 
v L "var1" 2 554 "int8" `305 
v L "var2" 2 554 "int16" `306 
v L "var3" 2 554 "int8" `328 
f G "make32" 2 554 "int32(int8 var1,int16 var2,int8 var3)" `325 
v L "var1" 2 555 "int8" `305 
v L "var2" 2 555 "int8" `306 
v L "var3" 2 555 "int16" `332 
f G "make32" 2 555 "int32(int8 var1,int8 var2,int16 var3)" `329 
v L "var" 2 556 "int8" `334 
v L "bit" 2 556 "int8" `335 
f B "bit_set" 2 556 "void(int8 var,int8 bit)" `333 
v L "var" 2 557 "int16" `334 
v L "bit" 2 557 "int8" `338 
f G "bit_set" 2 557 "void(int16 var,int8 bit)" `336 
v L "var" 2 558 "int32" `334 
v L "bit" 2 558 "int8" `341 
f G "bit_set" 2 558 "void(int32 var,int8 bit)" `339 
v L "var" 2 559 "int8" `343 
v L "bit" 2 559 "int8" `344 
f B "bit_clear" 2 559 "void(int8 var,int8 bit)" `342 
v L "var" 2 560 "int16" `343 
v L "bit" 2 560 "int8" `347 
f G "bit_clear" 2 560 "void(int16 var,int8 bit)" `345 
v L "var" 2 561 "int32" `343 
v L "bit" 2 561 "int8" `350 
f G "bit_clear" 2 561 "void(int32 var,int8 bit)" `348 
v L "var" 2 562 "int8" `352 
v L "bit" 2 562 "int8" `353 
f B "bit_test" 2 562 "int8(int8 var,int8 bit)" `351 
v L "var" 2 563 "int16" `352 
v L "bit" 2 563 "int8" `356 
f G "bit_test" 2 563 "int8(int16 var,int8 bit)" `354 
v L "var" 2 564 "int32" `352 
v L "bit" 2 564 "int8" `359 
f G "bit_test" 2 564 "int8(int32 var,int8 bit)" `357  "#use delay() Prototypes:"
v L "count" 2 567 "int8" `361 
f B "delay_cycles" 2 567 "void(int8 count)" `360 
v L "time" 2 568 "int16" `363 
f B "delay_ms" 2 568 "void(int16 time)" `362 
v L "time" 2 569 "int16" `365 
f B "delay_us" 2 569 "void(int16 time)" `364  "#use rs232() Prototypes:"
v L "cdata" 2 572 "int8" `367 
f B "putchar" 2 572 "void(int8 cdata)" `366 
v L "cdata" 2 573 "int8" `369 
v L "stream" 2 573 "int8" `370 
f G "putchar" 2 573 "void(int8 cdata,int8 stream)" `368 
v L "string" 2 574 "*int8" `372 
f B "puts" 2 574 "void(*int8 string)" `371 
v L "string" 2 575 "*int8" `374 
v L "stream" 2 575 "int8" `375 
f G "puts" 2 575 "void(*int8 string,int8 stream)" `373 
f B "getch" 2 576 "int8()" `376 
v L "stream" 2 577 "int8" `378 
f G "getch" 2 577 "int8(int8 stream)" `377 
v L "string" 2 578 "*int8" `380 
f B "gets" 2 578 "void(*int8 string)" `379 
v L "string" 2 579 "*int8" `382 
v L "stream" 2 579 "int8" `383 
f G "gets" 2 579 "void(*int8 string,int8 stream)" `381 
f B "kbhit" 2 580 "int8()" `384 
v L "stream" 2 581 "int8" `386 
f G "kbhit" 2 581 "int8(int8 stream)" `385 
v L "string" 2 582 "*int8" `388 
f B "printf" 2 582 "void(*int8 string,*int8 _VA_LIST)" `387 
v L "stream" 2 583 "int8" `391 
v L "string" 2 583 "*int8" `392 
f B "fprintf" 2 583 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `390 
f B "putc_send" 2 584 "void()" `394 
v L "stream" 2 585 "int8" `396 
f B "fputc_send" 2 585 "void(int8 stream)" `395 
f B "rcv_buffer_full" 2 586 "int8()" `397 
v L "stream" 2 587 "int8" `399 
f G "rcv_buffer_full" 2 587 "int8(int8 stream)" `398 
f B "rcv_buffer_bytes" 2 588 "int16()" `400 
v L "stream" 2 589 "int8" `402 
f G "rcv_buffer_bytes" 2 589 "int16(int8 stream)" `401 
f B "tx_buffer_full" 2 590 "int8()" `403 
v L "stream" 2 591 "int8" `405 
f G "tx_buffer_full" 2 591 "int8(int8 stream)" `404 
f B "tx_buffer_bytes" 2 592 "int16()" `406 
v L "stream" 2 593 "int8" `408 
f G "tx_buffer_bytes" 2 593 "int16(int8 stream)" `407  "#use i2c() Prototypes:"
f B "i2c_read" 2 596 "int8()" `409 
v L "stream" 2 597 "int8" `411 
f G "i2c_read" 2 597 "int8(int8 stream)" `410 
v L "stream" 2 598 "int8" `413 
v L "ack" 2 598 "int8" `414 
f G "i2c_read" 2 598 "int8(int8 stream,int8 ack)" `412 
v L "data" 2 599 "int8" `416 
f B "i2c_write" 2 599 "int8(int8 data)" `415 
v L "stream" 2 600 "int8" `418 
v L "data" 2 600 "int8" `419 
f G "i2c_write" 2 600 "int8(int8 stream,int8 data)" `417 
f B "i2c_start" 2 601 "void()" `420 
v L "stream" 2 602 "int8" `422 
f G "i2c_start" 2 602 "void(int8 stream)" `421 
v L "stream" 2 603 "int8" `424 
v L "restart" 2 603 "int8" `425 
f G "i2c_start" 2 603 "void(int8 stream,int8 restart)" `423 
f B "i2c_stop" 2 604 "void()" `426 
v L "stream" 2 605 "int8" `428 
f G "i2c_stop" 2 605 "void(int8 stream)" `427 
f B "i2c_isr_state" 2 606 "int8()" `429 
v L "addr" 2 607 "int8" `431 
f B "i2c_slaveaddr" 2 607 "void(int8 addr)" `430 
v L "stream" 2 608 "int8" `433 
v L "addr" 2 608 "int8" `434 
f G "i2c_slaveaddr" 2 608 "void(int8 stream,int8 addr)" `432 
f B "i2c_poll" 2 609 "int8()" `435 
v L "stream" 2 610 "int8" `437 
f G "i2c_poll" 2 610 "int8(int8 stream)" `436 
v L "baud" 2 611 "int32" `439 
f B "i2c_init" 2 611 "void(int32 baud)" `438 
v L "stream" 2 612 "int8" `441 
v L "baud" 2 612 "int32" `442 
f G "i2c_init" 2 612 "void(int8 stream,int32 baud)" `440  "#use spi() Prototypes:"
f B "spi_xfer" 2 615 "int8()" `443 
f G "spi_xfer" 2 616 "int16()" `444 
f G "spi_xfer" 2 617 "int32()" `445 
v L "data" 2 618 "int8" `447 
f G "spi_xfer" 2 618 "int8(int8 data)" `446 
v L "data" 2 619 "int16" `449 
f G "spi_xfer" 2 619 "int16(int16 data)" `448 
v L "data" 2 620 "int32" `451 
f G "spi_xfer" 2 620 "int32(int32 data)" `450 
v L "stream" 2 621 "int8" `453 
v L "data" 2 621 "int8" `454 
f G "spi_xfer" 2 621 "int8(int8 stream,int8 data)" `452 
v L "stream" 2 622 "int8" `453 
v L "data" 2 622 "int16" `457 
f G "spi_xfer" 2 622 "int16(int8 stream,int16 data)" `455 
v L "stream" 2 623 "int8" `453 
v L "data" 2 623 "int32" `460 
f G "spi_xfer" 2 623 "int32(int8 stream,int32 data)" `458 
v L "stream" 2 624 "int8" `462 
v L "data" 2 624 "int8" `463 
v L "bits" 2 624 "int8" `464 
f G "spi_xfer" 2 624 "int8(int8 stream,int8 data,int8 bits)" `461 
v L "stream" 2 625 "int8" `462 
v L "data" 2 625 "int16" `463 
v L "bits" 2 625 "int8" `468 
f G "spi_xfer" 2 625 "int16(int8 stream,int16 data,int8 bits)" `465 
v L "stream" 2 626 "int8" `462 
v L "data" 2 626 "int32" `463 
v L "bits" 2 626 "int8" `472 
f G "spi_xfer" 2 626 "int32(int8 stream,int32 data,int8 bits)" `469 
v L "baud" 2 627 "int32" `474 
f B "spi_init" 2 627 "void(int32 baud)" `473 
v L "stream" 2 628 "int8" `476 
v L "baud" 2 628 "int32" `477 
f G "spi_init" 2 628 "void(int8 stream,int32 baud)" `475 
v L "baud" 2 629 "int32" `479 
f B "spi_speed" 2 629 "void(int32 baud)" `478 
v L "stream" 2 630 "int8" `481 
v L "baud" 2 630 "int32" `482 
f G "spi_speed" 2 630 "void(int8 stream,int32 baud)" `480 
v L "stream" 2 631 "int8" `484 
v L "baud" 2 631 "int32" `485 
v L "clock" 2 631 "int32" `486 
f G "spi_speed" 2 631 "void(int8 stream,int32 baud,int32 clock)" `483 
v L "data" 2 632 "int8" `488 
f B "spi_prewrite" 2 632 "void(int8 data)" `487 
v L "data" 2 633 "int16" `490 
f G "spi_prewrite" 2 633 "void(int16 data)" `489 
v L "data" 2 634 "int32" `492 
f G "spi_prewrite" 2 634 "void(int32 data)" `491 
v L "??65535" 2 635 "int8" `494 
v L "data" 2 635 "int8" `495 
f G "spi_prewrite" 2 635 "void(int8 ,int8 data)" `493 
v L "??65535" 2 636 "int8" `494 
v L "data" 2 636 "int16" `498 
f G "spi_prewrite" 2 636 "void(int8 ,int16 data)" `496 
v L "??65535" 2 637 "int8" `494 
v L "data" 2 637 "int32" `501 
f G "spi_prewrite" 2 637 "void(int8 ,int32 data)" `499 
f B "spi_xfer_in" 2 638 "int8()" `502 
f G "spi_xfer_in" 2 639 "int16()" `503 
f G "spi_xfer_in" 2 640 "int32()" `504 
v L "bits" 2 641 "int8" `506 
f G "spi_xfer_in" 2 641 "int8(int8 bits)" `505 
v L "bits" 2 642 "int8" `508 
f G "spi_xfer_in" 2 642 "int16(int8 bits)" `507 
v L "bits" 2 643 "int8" `510 
f G "spi_xfer_in" 2 643 "int32(int8 bits)" `509 
v L "stream" 2 644 "int8" `512 
v L "bits" 2 644 "int8" `513 
f G "spi_xfer_in" 2 644 "int8(int8 stream,int8 bits)" `511 
v L "stream" 2 645 "int8" `512 
v L "bits" 2 645 "int8" `516 
f G "spi_xfer_in" 2 645 "int16(int8 stream,int8 bits)" `514 
v L "stream" 2 646 "int8" `512 
v L "bits" 2 646 "int8" `519 
f G "spi_xfer_in" 2 646 "int32(int8 stream,int8 bits)" `517  "#use rtos() Prototypes:"
f B "rtos_run" 2 649 "void()" `520 
f B "rtos_yield" 2 650 "void()" `521 
v L "task" 2 651 "int8" `523 
f B "rtos_enable" 2 651 "void(int8 task)" `522 
v L "task" 2 652 "int8" `525 
f B "rtos_disable" 2 652 "void(int8 task)" `524 
f B "rtos_terminate" 2 653 "void()" `526 
v L "flag" 2 654 "int8" `528 
f B "rtos_await" 2 654 "void(int8 flag)" `527 
v L "sem" 2 655 "int8" `530 
f B "rtos_wait" 2 655 "void(int8 sem)" `529 
v L "sem" 2 656 "int8" `532 
f B "rtos_signal" 2 656 "void(int8 sem)" `531 
v L "task" 2 657 "int8" `534 
v L "msg" 2 657 "int8" `535 
f B "rtos_msg_send" 2 657 "void(int8 task,int8 msg)" `533 
f B "rtos_msg_read" 2 658 "int8()" `536 
f B "rtos_msg_poll" 2 659 "int8()" `537 
v L "task" 2 660 "int8" `539 
f B "rtos_overrun" 2 660 "int8(int8 task)" `538 
v L "task" 2 661 "int8" `541 
v L "stat" 2 661 "*int8" `542 
f B "rtos_stats" 2 661 "void(int8 task,*int8 stat)" `540  "#use timer() Prototypes:"
f B "get_ticks" 2 664 "int8()" `543 
f G "get_ticks" 2 665 "int16()" `544 
f G "get_ticks" 2 666 "int32()" `545 
v L "stream" 2 667 "int8" `547 
f G "get_ticks" 2 667 "int8(int8 stream)" `546 
v L "stream" 2 668 "int8" `549 
f G "get_ticks" 2 668 "int16(int8 stream)" `548 
v L "stream" 2 669 "int8" `551 
f G "get_ticks" 2 669 "int32(int8 stream)" `550 
v L "value" 2 670 "int8" `553 
f B "set_ticks" 2 670 "void(int8 value)" `552 
v L "value" 2 671 "int16" `555 
f G "set_ticks" 2 671 "void(int16 value)" `554 
v L "value" 2 672 "int32" `557 
f G "set_ticks" 2 672 "void(int32 value)" `556 
v L "stream" 2 673 "int8" `559 
v L "value" 2 673 "int8" `560 
f G "set_ticks" 2 673 "void(int8 stream,int8 value)" `558 
v L "stream" 2 674 "int8" `559 
v L "value" 2 674 "int16" `563 
f G "set_ticks" 2 674 "void(int8 stream,int16 value)" `561 
v L "stream" 2 675 "int8" `559 
v L "value" 2 675 "int32" `566 
f G "set_ticks" 2 675 "void(int8 stream,int32 value)" `564  "#use pwm() Prototypes:"
f B "pwm_on" 2 678 "void()" `567 
v L "stream" 2 679 "int8" `569 
f G "pwm_on" 2 679 "void(int8 stream)" `568 
f B "pwm_off" 2 680 "void()" `570 
v L "stream" 2 681 "int8" `572 
f G "pwm_off" 2 681 "void(int8 stream)" `571 
v L "duty" 2 682 "int16" `574 
f B "pwm_set_duty" 2 682 "void(int16 duty)" `573 
v L "stream" 2 683 "int8" `576 
v L "duty" 2 683 "int16" `577 
f G "pwm_set_duty" 2 683 "void(int8 stream,int16 duty)" `575 
v L "percent" 2 684 "int16" `579 
f B "pwm_set_duty_percent" 2 684 "void(int16 percent)" `578 
v L "stream" 2 685 "int8" `581 
v L "percent" 2 685 "int16" `582 
f G "pwm_set_duty_percent" 2 685 "void(int8 stream,int16 percent)" `580 
v L "frequency" 2 686 "int32" `584 
f B "pwm_set_frequency" 2 686 "void(int32 frequency)" `583 
v L "stream" 2 687 "int8" `586 
v L "frequency" 2 687 "int32" `587 
f G "pwm_set_frequency" 2 687 "void(int8 stream,int32 frequency)" `585  "#use capture() Prototypes:"
f B "get_capture_time" 2 690 "int16()" `588 
v L "stream" 2 691 "int8" `590 
f G "get_capture_time" 2 691 "int16(int8 stream)" `589 
f B "get_capture_event" 2 692 "int8()" `591 
v L "stream" 2 693 "int8" `593 
f G "get_capture_event" 2 693 "int8(int8 stream)" `592  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 706 "int16" `595 
f B "goto_address" 2 706 "void(int16 address)" `594 
v L "label" 2 707 "int16" `597 
f B "label_address" 2 707 "int16(int16 label)" `596  "Program Memory Prototypes:"
v L "address" 2 710 "int16" `599 
v L "dataptr" 2 710 "*int8" `600 
v L "count" 2 710 "int16" `601 
f B "read_program_memory" 2 710 "void(int16 address,*int8 dataptr,int16 count)" `598 
v L "address" 2 711 "int16" `603 
f B "read_program_eeprom" 2 711 "int16(int16 address)" `602 
v L "address" 2 712 "int16" `605 
f B "erase_program_eeprom" 2 712 "void(int16 address)" `604 
v L "address" 2 713 "int16" `607 
v L "dataptr" 2 713 "*int8" `608 
v L "count" 2 713 "int16" `609 
f B "write_program_memory" 2 713 "void(int16 address,*int8 dataptr,int16 count)" `606 
v L "address" 2 714 "int16" `611 
v L "data" 2 714 "int16" `612 
f B "write_program_eeprom" 2 714 "void(int16 address,int16 data)" `610  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 719 "int16" `613 
v L "address" 2 724 "__EEADDRESS__" `615 
f B "read_eeprom" 2 724 "int8(__EEADDRESS__ address)" `614 
v L "address" 2 725 "__EEADDRESS__" `617 
v L "value" 2 725 "int8" `618 
f B "write_eeprom" 2 725 "void(__EEADDRESS__ address,int8 value)" `616  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 732 "int32" `620 
f B "enable_interrupts" 2 732 "void(int32 interrupt)" `619 
v L "interrupt" 2 733 "int32" `622 
f B "disable_interrupts" 2 733 "void(int32 interrupt)" `621 
v L "interrupt" 2 734 "int32" `624 
f B "clear_interrupt" 2 734 "void(int32 interrupt)" `623 
v L "interrupt" 2 735 "int32" `626 
f B "interrupt_active" 2 735 "int8(int32 interrupt)" `625 
v L "interrupt" 2 736 "int32" `628 
f B "interrupt_enabled" 2 736 "int8(int32 interrupt)" `627 
v L "source" 2 737 "int8" `630 
v L "edge" 2 737 "int8" `631 
f B "ext_int_edge" 2 737 "void(int8 source,int8 edge)" `629 
v L "address" 2 738 "int16" `633 
f B "jump_to_irs" 2 738 "void(int16 address)" `632  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 740 "0x40"
d G "H_TO_L" 2 741 "0"
d G "GLOBAL" 2 743 "0xF2C0"
d G "PERIPH" 2 744 "0xF240"
d G "INT_RTCC" 2 745 "0x00F220"
d G "INT_TIMER0" 2 746 "0x00F220"
d G "INT_TIMER1" 2 747 "0x009D01"
d G "INT_TIMER2" 2 748 "0x009D02"
d G "INT_TIMER3" 2 749 "0x00A002"
d G "INT_EXT_L2H" 2 750 "0x5000F210"
d G "INT_EXT_H2L" 2 751 "0x6000F210"
d G "INT_EXT" 2 752 "0x00F210"
d G "INT_EXT1_L2H" 2 753 "0x5001F008"
d G "INT_EXT1_H2L" 2 754 "0x6001F008"
d G "INT_EXT1" 2 755 "0x00F008"
d G "INT_EXT2_L2H" 2 756 "0x5002F010"
d G "INT_EXT2_H2L" 2 757 "0x6002F010"
d G "INT_EXT2" 2 758 "0x00F010"
d G "INT_RB" 2 759 "0x00FFF208"
d G "INT_PSP" 2 760 "0x009D80"
d G "INT_AD" 2 761 "0x009D40"
d G "INT_RDA" 2 762 "0x009D20"
d G "INT_TBE" 2 763 "0x009D10"
d G "INT_SSP" 2 764 "0x009D08"
d G "INT_CCP1" 2 765 "0x009D04"
d G "INT_CCP2" 2 766 "0x00A001"
d G "INT_BUSCOL" 2 767 "0x00A008"
d G "INT_LOWVOLT" 2 768 "0x00A004"
d G "INT_CANIRX" 2 769 "0x00A380"
d G "INT_CANWAKE" 2 770 "0x00A340"
d G "INT_CANERR" 2 771 "0x00A320"
d G "INT_COMP" 2 772 "0x00A040"
d G "INT_EEPROM" 2 773 "0x00A010"
d G "INT_CANTX2" 2 774 "0x00A310"
d G "INT_CANTX1" 2 775 "0x00A308"
d G "INT_CANTX0" 2 776 "0x00A304"
d G "INT_CANRX1" 2 777 "0x00A302"
d G "INT_CANRX0" 2 778 "0x00A301"
D G "_STDIO" 3 12 ""
D G "_STRING" 4 12 ""
D G "_STDDEF" 5 13 ""
D G "ptrdiff_t" 5 18 "unsigned int16"
D G "size_t" 5 24 "unsigned int16"
D G "wchar_t" 5 26 "char"
D G "NULL" 5 27 "0"
D G "offsetof" 5 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_irs" 4 19 10 "FUNCTION"
V L "s1" 4 34 "*int8" `642 
V L "s2" 4 34 "*int8" `643 
V L "n" 4 34 "int16" `644 
F G "memmove" 4 35 "*int8(*int8 s1,*int8 s2,int16 n)" `641 
V L "sc1" 4 36 "*int8" `645 
V L "sc2" 4 37 "*int8" `646 
D G "strcopy" 4 54 "strcpy"
C L "strncpy" 4 19 4 "FUNCTION"
V L "s1" 4 61 "*int8" `648 
V L "s2" 4 61 "*int8" `649 
V L "n" 4 61 "int16" `650 
F G "strncpy" 4 62 "*int8(*int8 s1,*int8 s2,int16 n)" `647 
V L "s" 4 63 "*int8" `651 
C L "strcat" 4 19 3 "FUNCTION"
V L "s1" 4 78 "*int8" `653 
V L "s2" 4 78 "*int8" `654 
F G "strcat" 4 79 "*int8(*int8 s1,*int8 s2)" `652 
V L "s" 4 80 "*int8" `655 
C L "strncat" 4 19 2 "FUNCTION"
V L "s1" 4 96 "*int8" `657 
V L "s2" 4 96 "*int8" `658 
V L "n" 4 96 "int16" `659 
F G "strncat" 4 97 "*int8(*int8 s1,*int8 s2,int16 n)" `656 
V L "s" 4 98 "*int8" `660 
C L "memcmp" 4 19 3 "FUNCTION"
V L "s1" 4 120 "*int8" `662 
V L "s2" 4 120 "*int8" `663 
V L "n" 4 120 "int16" `664 
F G "memcmp" 4 121 "sint8(*int8 s1,*int8 s2,int16 n)" `661 
V L "su1" 4 122 "*int8" `665 
V L "su2" 4 122 "*int8" `666 
C L "strcmp" 4 19 2 "FUNCTION"
V L "s1" 4 134 "*int8" `668 
V L "s2" 4 134 "*int8" `669 
F G "strcmp" 4 135 "sint8(*int8 s1,*int8 s2)" `667 
C L "strcoll" 4 19 2 "FUNCTION"
V L "s1" 4 144 "*int8" `671 
V L "s2" 4 144 "*int8" `672 
F G "strcoll" 4 145 "sint8(*int8 s1,*int8 s2)" `670 
C L "strncmp" 4 19 4 "FUNCTION"
V L "s1" 4 157 "*int8" `674 
V L "s2" 4 157 "*int8" `675 
V L "n" 4 157 "int16" `676 
F G "strncmp" 4 158 "sint8(*int8 s1,*int8 s2,int16 n)" `673 
C L "strxfrm" 4 19 3 "FUNCTION"
V L "s1" 4 169 "*int8" `678 
V L "s2" 4 169 "*int8" `679 
V L "n" 4 169 "int16" `680 
F G "strxfrm" 4 170 "int16(*int8 s1,*int8 s2,int16 n)" `677 
V L "s" 4 171 "*int8" `681 
V L "n1" 4 172 "int8" `682 
C L "memchr" 4 19 3 "FUNCTION"
V L "s" 4 191 "*int8" `684 
V L "c" 4 191 "int8" `685 
V L "n" 4 191 "int16" `686 
F G "memchr" 4 192 "*int8(*int8 s,int8 c,int16 n)" `683 
V L "uc" 4 193 "int8" `687 
V L "su" 4 194 "*int8" `688 
C L "strchr" 4 19 2 "FUNCTION"
V L "s" 4 205 "*int8" `690 
V L "c" 4 205 "int8" `691 
F G "strchr" 4 206 "*int8(*int8 s,int8 c)" `689 
C L "strcspn" 4 19 4 "FUNCTION"
V L "s1" 4 217 "*int8" `693 
V L "s2" 4 217 "*int8" `694 
F G "strcspn" 4 218 "int8(*int8 s1,*int8 s2)" `692 
V L "sc1" 4 219 "*int8" `695 
V L "sc2" 4 219 "*int8" `696 
C L "strpbrk" 4 19 4 "FUNCTION"
V L "s1" 4 232 "*int8" `698 
V L "s2" 4 232 "*int8" `699 
F G "strpbrk" 4 233 "*int8(*int8 s1,*int8 s2)" `697 
V L "sc1" 4 234 "*int8" `700 
V L "sc2" 4 234 "*int8" `701 
C L "strrchr" 4 19 2 "FUNCTION"
V L "s" 4 247 "*int8" `703 
V L "c" 4 247 "int8" `704 
F G "strrchr" 4 248 "*int8(*int8 s,int8 c)" `702 
V L "p" 4 249 "*int8" `705 
C L "strspn" 4 19 2 "FUNCTION"
V L "s1" 4 262 "*int8" `707 
V L "s2" 4 262 "*int8" `708 
F G "strspn" 4 263 "int8(*int8 s1,*int8 s2)" `706 
V L "sc1" 4 264 "*int8" `709 
V L "sc2" 4 264 "*int8" `710 
C L "strstr" 4 19 6 "FUNCTION"
V L "s1" 4 281 "*int8" `712 
V L "s2" 4 281 "*int8" `713 
F G "strstr" 4 282 "*int8(*int8 s1,*int8 s2)" `711 
V L "s" 4 283 "*int8" `714 
V L "t" 4 283 "*int8" `715 
C L "strtok" 4 19 13 "FUNCTION"
V L "s1" 4 320 "*int8" `717 
V L "s2" 4 320 "*int8" `718 
F G "strtok" 4 321 "*int8(*int8 s1,*int8 s2)" `716 
V L "beg" 4 322 "*int8" `719 
V L "end" 4 322 "*int8" `720 
V L "save" 4 323 "*int8" `721 
C L "strlen" 4 19 6 "FUNCTION"
V L "s" 4 369 "*int8" `723 
F G "strlen" 4 370 "int8(*int8 s)" `722 
V L "sc" 4 371 "*int8" `724 
C L "stricmp" 4 19 2 "FUNCTION"
V L "s1" 4 380 "*int8" `726 
V L "s2" 4 380 "*int8" `727 
F G "stricmp" 4 381 "sint8(*int8 s1,*int8 s2)" `725 
C L "strlwr" 4 19 3 "FUNCTION"
V L "s" 4 394 "*int8" `731 
F G "strlwr" 4 395 "*int8(*int8 s)" `730 
V L "p" 4 396 "*int8" `732 
C L "strupr" 4 19 3 "FUNCTION"
V L "s" 4 408 "*int8" `734 
F G "strupr" 4 409 "*int8(*int8 s)" `733 
V L "p" 4 410 "*int8" `735 
D G "_STDLIB" 7 12 ""
D G "RAND_MAX" 7 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 7 25 "1"
T G "div_t" 7 33 "{sint8 quot,sint8 rem}" `739 
T G "ldiv_t" 7 38 "{sint16 quot,sint16 rem}" `743  "(C) Copyright 1996,2003 Custom Computer Services           ////"
C L "atoi" 5 3 6 "FUNCTION"
C L "atoi" 7 43 2 "FUNCTION"
C L "atoi" 7 46 1 "*"
C L "atoi" 7 46 1 "*"
V L "s" 7 50 "*int8" `745 
f G "atoi" 7 50 "sint8(*int8 s)" `744  "Syntax: signed int32  atoi32(char * s)"
V L "s" 7 58 "*int8" `747 
f G "atoi32" 7 58 "sint32(*int8 s)" `746  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi32" 7 46 2 "FUNCTION"
V L "num" 7 79 "sint32" `749 
V L "base" 7 79 "int8" `750 
V L "s" 7 79 "*int8" `751 
f G "itoa" 7 79 "*int8(sint32 num,int8 base,*int8 s)" `748  "Standard template: signed int16  atol(char * s)"
C L "itoa" 7 81 1 "*"
C L "itoa" 7 81 1 "*"
V L "s" 7 85 "*int8" `753 
f G "atol" 7 85 "sint16(*int8 s)" `752  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 7 87 1 "*"
C L "atol" 7 87 1 "*"
C L "atol" 7 87 1 "*"
C L "atol" 7 87 1 "*"
V L "s" 7 93 "*int8" `755 
V L "endptr" 7 93 "*int8" `756 
V L "base" 7 93 "sint8" `757 
f G "strtol" 7 93 "sint16(*int8 s,*int8 endptr,sint8 base)" `754  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 7 95 1 "*"
C L "strtol" 7 95 1 "*"
C L "strtol" 7 95 1 "*"
C L "strtol" 7 95 1 "*"
V L "s" 7 101 "*int8" `759 
V L "endptr" 7 101 "*int8" `760 
V L "base" 7 101 "sint8" `761 
f G "strtoul" 7 101 "int16(*int8 s,*int8 endptr,sint8 base)" `758  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 7 95 2 "FUNCTION"
C L "strtoul" 7 103 1 "*"
C L "strtoul" 7 103 1 "*"
C L "strtoul" 7 103 1 "*"
V L "s" 7 110 "*int8" `763 
V L "endptr" 7 110 "*int8" `764 
f G "strtof" 7 110 "float(*int8 s,*int8 endptr)" `762  "provided for compatibility"
D G "strtof48" 7 116 "(s, e) strtof(s, e)"
D G "strtod" 7 117 "(s, e) strtof(s, e)"
C L "strtof" 7 103 1 "FUNCTION"
C L "strtof" 7 120 1 "*"
D G "atof" 7 124 "(s)   strtof(s, 0)"
C L "strtof" 7 120 1 "FUNCTION"
C L "strtof" 7 143 1 "*"
C L "strtof" 7 143 1 "*"
C L "strtof" 7 143 1 "*"
V L "s" 7 149 "*int8" `766 
f G "atoe" 7 149 "float(*int8 s)" `765  "Pseudo-random sequence generation functions"
C L "atoe" 7 143 1 "FUNCTION"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
C L "atoe" 7 160 1 "*"
f G "rand" 7 169 "int16()" `767  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
C L "rand" 7 171 1 "*"
V L "seed" 7 191 "int32" `769 
f G "srand" 7 191 "void(int32 seed)" `768  "Memory management functions"
C L "srand" 7 171 3 "FUNCTION"
V L "string" 7 205 "*int8" `771 
f G "system" 7 205 "sint8(*int8 string)" `770  "Searching and sorting utilities"
C L "system" 7 171 1 "FUNCTION"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 1 "*"
C L "system" 7 211 4 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
C L "system" 7 229 1 "*"
D G "labs" 7 249 "abs"
V L "numer" 7 251 "sint8" `773 
V L "denom" 7 251 "sint8" `774 
f G "div" 7 251 "div_t(sint8 numer,sint8 denom)" `772 
V L "numer" 7 252 "sint16" `776 
V L "denom" 7 252 "sint16" `777 
f G "ldiv" 7 252 "ldiv_t(sint16 numer,sint16 denom)" `775  "Multibyte character functions"
C L "ldiv" 7 229 4 "FUNCTION"
C L "ldiv" 5 2 7 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
V L "numer" 7 274 "sint8" `773 
V L "denom" 7 274 "sint8" `780 
F G "div" 7 275 "div_t(sint8 numer,sint8 denom)" `772 
V L "val" 7 276 "div_t" `778 
V L "numer" 7 282 "sint16" `776 
V L "denom" 7 282 "sint16" `787 
F G "ldiv" 7 283 "ldiv_t(sint16 numer,sint16 denom)" `775 
V L "val" 7 284 "ldiv_t" `785 
V L "s" 7 361 "*int8" `793 
F G "atoe" 7 362 "float(*int8 s)" `765 
V L "pow10" 7 363 "float" `792 
V L "result" 7 364 "float" `793 
V L "sign" 7 365 "int8" `794 
V L "expsign" 7 366 "int8" `795 
V L "c" 7 367 "int8" `796 
V L "ptr" 7 368 "int8" `797 
V L "i" 7 369 "int8" `798 
V L "exp" 7 370 "float" `799 
V L "expcnt" 7 371 "int8" `800 
C L "atoe" 7 397 1 "FUNCTION"
V L "s" 7 429 "*int8" `813 
F G "atoi" 7 430 "sint8(*int8 s)" `744 
V L "result" 7 431 "sint8" `812 
V L "sign" 7 432 "int8" `813 
V L "base" 7 432 "int8" `814 
V L "index" 7 432 "int8" `815 
V L "c" 7 433 "int8" `816 
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
C L "atoi" 7 397 1 "FUNCTION"
V L "s" 7 498 "*int8" `818 
F G "atol" 7 499 "sint16(*int8 s)" `752 
V L "result" 7 500 "sint16" `817 
V L "sign" 7 501 "int8" `818 
V L "base" 7 501 "int8" `819 
V L "index" 7 501 "int8" `820 
V L "c" 7 502 "int8" `821 
C L "atol" 7 397 1 "FUNCTION"
C L "atol" 7 397 1 "FUNCTION"
C L "atol" 7 397 1 "FUNCTION"
C L "atol" 7 397 1 "FUNCTION"
C L "mult_with10" 7 397 1 "FUNCTION"
V L "num" 7 565 "int32" `823 
F G "mult_with10" 7 566 "sint32(int32 num)" `822 
V L "s" 7 571 "*int8" `825 
F G "atoi32" 7 572 "sint32(*int8 s)" `746 
V L "result" 7 573 "sint32" `824 
V L "sign" 7 574 "int8" `825 
V L "base" 7 574 "int8" `826 
V L "index" 7 574 "int8" `827 
V L "c" 7 575 "int8" `828 
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
C L "atoi32" 7 397 1 "FUNCTION"
V L "num" 7 770 "sint32" `749 
V L "base" 7 770 "int8" `750 
V L "s" 7 770 "*int8" `832 
F G "itoa" 7 771 "*int8(sint32 num,int8 base,*int8 s)" `748 
V L "temp" 7 772 "int32" `829 
V L "i" 7 773 "int8" `830 
V L "sign" 7 773 "int8" `831 
V L "cnt" 7 773 "int8" `832 
V L "c" 7 774 "int8" `833 
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
C L "itoa" 7 397 1 "FUNCTION"
V L "s" 7 885 "*int8" `763 
V L "endptr" 7 885 "*int8" `842 
F G "strtof" 7 886 "float(*int8 s,*int8 endptr)" `762 
V L "pow10" 7 887 "float" `840 
V L "result" 7 888 "float" `841 
V L "skip" 7 889 "int1" `842 
V L "sign" 7 889 "int1" `843 
V L "point" 7 889 "int1" `844 
V L "c" 7 890 "int8" `845 
V L "ptr" 7 891 "int8" `846 
V L "s" 7 1103 "*int8" `759 
V L "endptr" 7 1103 "*int8" `760 
V L "base" 7 1103 "sint8" `851 
F G "strtoul" 7 1104 "int16(*int8 s,*int8 endptr,sint8 base)" `758 
V L "sc" 7 1105 "*int8" `848 
V L "s1" 7 1105 "*int8" `849 
V L "sd" 7 1105 "*int8" `850 
V L "x" 7 1106 "int16" `851 
V L "sign" 7 1107 "int8" `852 
V L "digits" 7 1108 "int8[1]" `853 
C L "strtoul" 7 397 1 "FUNCTION"
C L "strtoul" 7 397 1 "FUNCTION"
C L "strtoul" 7 397 1 "FUNCTION"
V L "s" 7 1165 "*int8" `755 
V L "endptr" 7 1165 "*int8" `756 
V L "base" 7 1165 "sint8" `858 
F G "strtol" 7 1166 "sint16(*int8 s,*int8 endptr,sint8 base)" `754 
V L "sc" 7 1167 "*int8" `855 
V L "s1" 7 1167 "*int8" `856 
V L "sd" 7 1167 "*int8" `857 
V L "x" 7 1168 "sint16" `858 
V L "sign" 7 1169 "int8" `859 
V L "digits" 7 1170 "int8[1]" `860 
C L "strtol" 7 397 1 "FUNCTION"
C L "strtol" 7 397 1 "FUNCTION"
C L "strtol" 7 397 1 "FUNCTION"
V L "string" 7 1228 "*int8" `863 
F G "system" 7 1229 "sint8(*int8 string)" `770 
V L "s" 7 1233 "*int8" `863 
V L "n" 7 1233 "int16" `864 
F G "mblen" 7 1234 "int8(*int8 s,int16 n)" `862 
V L "pwc" 7 1238 "*int8" `866 
V L "s" 7 1238 "*int8" `867 
V L "n" 7 1238 "int16" `868 
F G "mbtowc" 7 1239 "int8(*int8 pwc,*int8 s,int16 n)" `865 
V L "s" 7 1244 "*int8" `870 
V L "wchar" 7 1244 "int8" `871 
F G "wctomb" 7 1245 "int8(*int8 s,int8 wchar)" `869 
V L "pwcs" 7 1250 "*int8" `873 
V L "s" 7 1250 "*int8" `874 
V L "n" 7 1250 "int16" `875 
F G "mbstowcs" 7 1251 "int16(*int8 pwcs,*int8 s,int16 n)" `872 
V L "s" 7 1256 "*int8" `877 
V L "pwcs" 7 1256 "*int8" `878 
V L "n" 7 1256 "int16" `879 
F G "wcstombs" 7 1257 "int16(*int8 s,*int8 pwcs,int16 n)" `876 
V G "_Randseed" 7 1266 "int32" `880 
F G "rand" 7 1269 "int16()" `767 
V L "seed" 7 1274 "int32" `885 
F G "srand" 7 1275 "void(int32 seed)" `768 
V L "p1" 7 1284 "*int8" `885 
V L "p2" 7 1284 "*int8" `886 
T G "*_Cmpfun" 7 1284 "sint8(*int8 p1,*int8 p2)" `884 
V L "qdata" 7 1291 "*int8" `889 
V L "qitems" 7 1291 "int8" `890 
V L "qsize" 7 1291 "int8" `891 
V L "cmp" 7 1291 "_Cmpfun" `892 
F G "qsort" 7 1291 "void(*int8 qdata,int8 qitems,int8 qsize,_Cmpfun cmp)" `888 
V L "m" 7 1292 "int8" `893 
V L "j" 7 1292 "int8" `894 
V L "i" 7 1292 "int8" `895 
V L "l" 7 1292 "int8" `896 
V L "done" 7 1293 "int1" `897 
V L "t" 7 1294 "int8[16]" `898 
V L "key" 7 1319 "*int8" `901 
V L "base" 7 1319 "*int8" `902 
V L "num" 7 1319 "int16" `903 
V L "width" 7 1319 "int16" `904 
V L "cmp" 7 1319 "_Cmpfun" `905 
F G "bsearch" 7 1320 "*int8(*int8 key,*int8 base,int16 num,int16 width,_Cmpfun cmp)" `900 
V L "p" 7 1321 "*int8" `906 
V L "q" 7 1321 "*int8" `907 
V L "n" 7 1322 "int16" `908 
V L "pivot" 7 1323 "int16" `909 
V L "val" 7 1324 "sint8" `910 
C L "bsearch" 7 397 1 "FUNCTION"
V G "buffer" 0 5 "int8[1]" `914 
V G "flag" 0 6 "int1" `915 
V G "client" 0 7 "int8" `916 
V G "dizaine_client" 0 8 "int8" `917 
V G "somme" 0 9 "int8" `918 
V G "seuil" 0 10 "int8" `919 
C L "EXT_isr" 0 12 1 "FUNCTION"
F G "EXT_isr" 0 15 "void()" `920 
C L "EXT1_isr" 0 12 1 "FUNCTION"
F G "EXT1_isr" 0 26 "void()" `921 
C L "EXT1_isr" 0 12 1 "FUNCTION"
C L "EXT1_isr" 0 12 1 "FUNCTION"
C L "RDA_isr" 0 12 1 "FUNCTION"
F G "RDA_isr" 0 39 "void()" `922 
F G "MAIN" 0 45 "void()" `923 
V L "somme" 0 57 "int8" `926 
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
C L "MAIN" 0 12 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 2
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_psp" 1 0
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
